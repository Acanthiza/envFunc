% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/name_env_out_new.R
\name{name_env_out_new}
\alias{name_env_out_new}
\title{Create output directory paths or parse output directory paths}
\usage{
name_env_out_new(
  set_list,
  base_dir = NULL,
  all_files = FALSE,
  show_null = FALSE
)
}
\arguments{
\item{set_list}{List (optionally nested) of critical settings (only) for use
in output path names. The first elements of the list will return directories.
Any elements within each of the first elements of the list are concatenated
to form the name of each directory (see examples)}

\item{base_dir}{Character. Directory prepended to the output path}

\item{all_files}{Logical or numeric. Return files within the \code{path} column
provided in the resulting dataframe? If numeric, passed to the \code{recurse}
argument of \code{fs::dir_ls()}.}

\item{show_null}{Logical. Display "NULL" or "NA" in names
(or gsub it out with "")}
}
\value{
Tibble containing:
\itemize{
\item all contexts: named as per the second level elements of \code{set_list}
\item directories: a directory for each element in the first level of \code{set_list}
\item path: the output path, prepended with base_dir
}
}
\description{
Either create file path for saving outputs or parse the meta data from a path
}
\examples{

settings <- list(extent = list(polygons = "sa_ibrasub_xn"
                               , filt_col = NULL
                               , filt_level = NULL
                               , bbox = TRUE
                               , buffer = 0
                               , temp_ext = "P50Y"
                               )
                 , grain = list(x = 90
                                , y = 90
                                , z = "P50Y"
                                , taxonomic = "species"
                                )
                 , reliability = list(rel_geo = 10000
                                      , rel_temp = "P10Y"
                                      )
                 )

settings$out_dir <- name_env_out(set_list = settings#[1:3]
                                 , base_dir = here::here("inst", "examples")
                                 )$path

settings$out_dir

fs::dir_create(settings$out_dir)

# create some junk files
purrr::map(1:10
           , \(x) tempfile(tmpdir = settings$out_dir)
           ) \%>\%
  fs::file_create()

files <- name_env_out(set_list = settings[1:3]
                      , base_dir = here::here("inst", "examples")
                      , all_files = TRUE
                      ) \%>\%
  tidyr::unnest(cols = c(files)
                , keep_empty = TRUE
                )

files

}
