% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timer.R
\name{timer}
\alias{timer}
\title{A (rough) timer}
\usage{
timer(
  process,
  notes = NULL,
  file = NULL,
  name = NULL,
  log = NULL,
  time_df = NULL,
  write_log = grepl("end", process)
)
}
\arguments{
\item{process}{Character. Name of the process being timed.}

\item{notes}{Character. Any notes associated with the process.}

\item{file}{Character. Name of the (script) file.}

\item{name}{Character. Might be the same as \code{process}, or an element over
which \code{process} is being run. e.g. \code{name} could be a species name where the
same function is being run over many different species.}

\item{log}{Character. Path to write the log file.}

\item{time_df}{Object name or null for the initiation of a timer.}

\item{write_log}{Write the log after this process. Default is only where
process contains 'end'.}
}
\value{
A dataframe (time_df), possibly with an additional row for the
current process. If \code{write_log} then \code{log} file is written.
}
\description{
Useful mainly in a script \code{file} to time, then log, each step (or \code{process})
in the file.
}
\details{
Timer can be re-started by including 'start' in a process.
}
\examples{
time_df <- timer("start script", file = "file 01", name = "example", log = "example.log")
Sys.sleep(1)
time_df <- timer("process 01", time_df = time_df)
Sys.sleep(1)
time_df
time_df <- timer("end script", time_df = time_df) # log.log written
Sys.sleep(1)
time_df <- timer("start script", file = "file 02", time_df = time_df)
Sys.sleep(1)
time_df <- timer("process 01", time_df = time_df, write_log = TRUE) # log.log written
time_df <- timer("end script", time_df = time_df) # log.log written

# clean up
rm(time_df)
unlink("example.log")

}
